generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  id             Int          @id @default(autoincrement())
  name           String
  surname        String
  email          String       @unique
  login          String       @unique
  password       String
  age            Int
  role           UserRole
  accessToken    String?
  
  // Fields specific to Teachers
  teacherClasses Class[]      @relation("TeacherToClass")
  lessons        Lesson[]     @relation("TeacherToLesson")
  teachingSchoolId Int?
  teachingSchool School?      @relation("TeachersToSchool", fields: [teachingSchoolId], references: [id])
  principalAt    School?      @relation("PrincipalToSchool")
  
  // Fields specific to Students
  classId        String?
  class          Class?       @relation("StudentToClass", fields: [classId], references: [id])
  grades         Grade[]      @relation("StudentToGrade")
  joinRequests   JoinRequest[] @relation("StudentToJoinRequest")
  parentId       Int?
  parent         User?        @relation("ParentToChildren", fields: [parentId], references: [id])
  attendingSchoolId Int?
  attendingSchool School?     @relation("StudentsToSchool", fields: [attendingSchoolId], references: [id])
  
  // Fields specific to Parents
  parentCode     String?      @unique
  children       User[]       @relation("ParentToChildren")
}

enum UserRole {
  TEACHER
  STUDENT
  PARENT
}

model Class {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id           String        @id @default(cuid())
  name         String

  teacherId    Int
  teacher      User          @relation("TeacherToClass", fields: [teacherId], references: [id])
  students     User[]        @relation("StudentToClass")
  joinRequests JoinRequest[]
  schoolId     Int
  school       School        @relation(fields: [schoolId], references: [id])
  lessons      Lesson[]
}

model School {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id          Int       @id @default(autoincrement())
  name        String
  address     String

  principalId Int       @unique
  principal   User      @relation("PrincipalToSchool", fields: [principalId], references: [id])
  classes     Class[]
  teachers    User[]    @relation("TeachersToSchool")
  students    User[]    @relation("StudentsToSchool")
}

model JoinRequest {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id        String     @id @default(cuid())
  status    Status     @default(PENDING)
  code      String     @unique

  studentId Int
  student   User       @relation("StudentToJoinRequest", fields: [studentId], references: [id])
  classId   String
  class     Class      @relation(fields: [classId], references: [id])
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Lesson {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id        Int        @id @default(autoincrement())
  subject   String
  week      Week
  day       Day
  cabinet   String
  order     Int
  startTime String
  endTime   String
  theme     String?

  teacherId Int
  teacher   User       @relation("TeacherToLesson", fields: [teacherId], references: [id])
  classId   String
  class     Class      @relation(fields: [classId], references: [id])
  grades    Grade[]

  @@unique([teacherId, classId, week, day, subject])
}

enum Week {
  ODD
  EVEN
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Grade {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id        Int      @id @default(autoincrement())
  value     String
  weight    Int
  date      String

  studentId Int
  student   User     @relation("StudentToGrade", fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}