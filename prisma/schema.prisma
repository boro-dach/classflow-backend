generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id             Int       @id @default(autoincrement())
  name           String
  surname        String
  email          String    @unique
  password       String
  age            Int
  accessToken    String?

  classes        Class[]
  lessons        Lesson[]
  schoolId       Int?
  school         School?   @relation("TeachersToSchool", fields: [schoolId], references: [id])
  principalAt    School?   @relation("PrincipalToSchool")
}

model Student {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id           Int           @id @default(autoincrement())
  name         String
  surname      String
  email        String        @unique
  password     String
  age          Int
  accessToken  String?

  classId      String?
  class        Class?        @relation(fields: [classId], references: [id])
  grades       Grade[]
  joinRequests JoinRequest[]
  parentId     Int?
  parent       Parent?       @relation(fields: [parentId], references: [id])
  schoolId     Int?
  school       School?       @relation(fields: [schoolId], references: [id])
}

model Parent {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id         Int       @id @default(autoincrement())
  name       String
  surname    String
  email      String    @unique
  password   String
  parentCode String    @unique
  age        Int
  accessToken String?

  students   Student[]
}

model Class {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id           String        @id @default(cuid())
  name         String

  teacherId    Int
  teacher      Teacher       @relation(fields: [teacherId], references: [id])
  students     Student[]
  joinRequests JoinRequest[]
  schoolId     Int
  school       School        @relation(fields: [schoolId], references: [id])
  lessons      Lesson[]
}

model School {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id          Int       @id @default(autoincrement())
  name        String
  address     String

  principalId Int       @unique
  principal   Teacher   @relation("PrincipalToSchool", fields: [principalId], references: [id])
  classes     Class[]
  teachers    Teacher[] @relation("TeachersToSchool")
  students    Student[]
}

model JoinRequest {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id        String     @id @default(cuid())
  status    Status     @default(PENDING)
  code      String     @unique

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
  classId   String
  class     Class   @relation(fields: [classId], references: [id])
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Lesson {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id        Int        @id @default(autoincrement())
  subject   String
  week      Week
  day       Day
  cabinet String
  order    Int
  startTime String
  endTime String
  theme String?

  teacherId Int
  teacher   Teacher    @relation(fields: [teacherId], references: [id])
  classId   String
  class     Class      @relation(fields: [classId], references: [id])
  grades    Grade[]

  @@unique([teacherId, classId, week, day, subject])
}

enum Week {
  ODD
  EVEN
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Grade {
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  id        Int      @id @default(autoincrement())
  value     String
  weight    Int
  date      String

  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}
