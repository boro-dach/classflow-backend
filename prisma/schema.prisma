generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id          Int        @id @default(autoincrement())
  name        String
  surname     String
  email       String     @unique
  password    String
  classes     Class[] // Классы, которыми управляет учитель
  lessons     Lesson[] // Уроки, которые ведёт учитель
  schedules   Schedule[] // Расписание, составленное учителем
  accessToken String?
}

model Student {
  id          Int           @id @default(autoincrement())
  name        String
  surname     String
  email       String        @unique
  password    String
  classId     Int? // ID класса, если ученик принят
  class       Class?        @relation(fields: [classId], references: [id])
  grades      Grade[] // Оценки ученика
  JoinRequest JoinRequest[]
  accessToken String?
}

model Class {
  id        Int           @id @default(autoincrement())
  name      String // Название класса (например, "1IT")
  code      String        @unique // Уникальный код для подключения
  teacherId Int // Классный руководитель
  teacher   Teacher       @relation(fields: [teacherId], references: [id])
  students  Student[] // Ученики в классе
  requests  JoinRequest[] // Заявки на вступление в класс
}

model JoinRequest {
  id        Int     @id @default(autoincrement())
  studentId Int // Ученик, отправивший запрос
  student   Student @relation(fields: [studentId], references: [id])
  classId   Int // Класс, в который хотят вступить
  class     Class   @relation(fields: [classId], references: [id])
  status    Status  @default(PENDING) // "pending", "accepted", "rejected"
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Lesson {
  id        Int        @id @default(autoincrement())
  title     String // Название урока (например, "Математика")
  teacherId Int // Учитель, ведущий урок
  teacher   Teacher    @relation(fields: [teacherId], references: [id])
  schedules Schedule[] // Связь с расписанием
  Grade     Grade[]
}

model Schedule {
  id        Int     @id @default(autoincrement())
  dayOfWeek Int // День недели (1 = Понедельник, 7 = Воскресенье)
  startTime String // Начало урока (HH:mm)
  endTime   String // Конец урока (HH:mm)
  isOddWeek Boolean // True - нечётная неделя, False - чётная неделя
  lessonId  Int // Урок
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  teacherId Int // Учитель
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  classroom String? // Кабинет (опционально)
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId Int // Ученик, получивший оценку
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int // Предмет, по которому поставлена оценка
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  value     Int // Оценка (например, 1-5 или 0-100)
  weight    Int // Важность оценки
  date      DateTime @default(now()) // Дата выставления
}
